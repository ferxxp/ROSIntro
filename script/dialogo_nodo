#!/usr/bin/env python
# -*- coding: utf-8 -*-
import rospy
from std_msgs.msg import String, Bool
from interaccion.msg import pos_usuario, inf_personal_usuario, usuario
from interaccion.srv import multiply
import configclock
import os

def multiplyper2srv(x):
    rospy.wait_for_service('multiplicar')
    try:
        add_two_ints = rospy.ServiceProxy('multiplicar', multiply)
        resp1 = add_two_ints(x)
        return resp1.resultado
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e
def sendtimer():
    if not configclock.sent_first_message:
        configclock.sent_first_message=True
        configclock.pubstart.publish(configclock.msgclock)
    else:
        configclock.pubreset.publish(configclock.msgclock)
def print_and_read(toread):
    print(toread)
    command = "espeak \"" + toread +"\" -v es"
    os.system(str(command));
def callback1(data):
    a=""
    a=a+"\n"+("Name:\t"+data.inf_personal.first_name)
    a=a+"\n"+("Age :\t"+str(data.inf_personal.age))
    a=a+"\n"+("Speaks :")
    for lan in data.inf_personal.language:
        a=a+"\n"+(lan)
    a=a+"\n"+("At :\t"+str(data.posicion.x)+" / "+str(data.posicion.y)+" / "+str(data.posicion.z))
    a=a+"\n"+("Thinks : \n" +data.usuario)
    a=a+"\n"+("Service returns:")
    a=a+"\n"+(str(multiplyper2srv(data.inf_personal.age)))
    a=a+"\n"+("______________________")
    sendtimer()
    print_and_read(a)


def callback2(data):
    if data.data:
        a=("\nClock is still alive\n")
        print(a)
        command = "espeak \"" + a +"\" -v es"
        os.system(str(command));

def screen():
    rospy.init_node('screen', anonymous=True)
    rospy.Subscriber("user_topic", usuario, callback1)
    rospy.Subscriber("still_alive", Bool, callback2)
    rospy.spin()
if __name__ == '__main__':
    screen()
